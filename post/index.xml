<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Attitude is altitude</title>
    <link>https://godeamon.github.io/post/</link>
    <description>Attitude is altitude (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Apr 2020 10:48:25 +0800</lastBuildDate>
    
    <atom:link href="https://godeamon.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Plan</title>
      <link>https://godeamon.github.io/post/plan/</link>
      <pubDate>Mon, 06 Apr 2020 10:41:03 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/plan/</guid>
      <description>&lt;h1 id=&#34;go-语言相关学习计划&#34;&gt;Go 语言相关学习计划&lt;/h1&gt;
&lt;p&gt;暂定自学路线&lt;/p&gt;
&lt;h2 id=&#34;go-源码&#34;&gt;Go 源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go runtime&lt;/li&gt;
&lt;li&gt;Go mem&lt;/li&gt;
&lt;li&gt;Go map, chan, slice and so on source code&lt;/li&gt;
&lt;li&gt;Go epoll&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他项目源码&#34;&gt;其他项目源码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;ethereum&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如何设计缓存系统&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reading</title>
      <link>https://godeamon.github.io/post/reading/</link>
      <pubDate>Mon, 06 Apr 2020 10:48:25 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/reading/</guid>
      <description>&lt;p&gt;READING&lt;/p&gt;
&lt;p&gt;阅读中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;laquo;Unix 编程艺术&amp;raquo; 5%，好书。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;laquo;架构整洁之道&amp;raquo; 80%，如果你是架构，可以帮助你设计结构，如果你是执行者，帮助你理解架构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;laquo;操作系统导论&amp;raquo; 100%，打牢基础。属于内功吧。&lt;/li&gt;
&lt;li&gt;&amp;laquo;代码大全&amp;raquo; 100%，很多示例代码，有助于搬砖。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go Modules</title>
      <link>https://godeamon.github.io/post/go-modules/</link>
      <pubDate>Sat, 14 Mar 2020 23:06:15 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/go-modules/</guid>
      <description>&lt;h1 id=&#34;1-gopath&#34;&gt;1. GOPATH&lt;/h1&gt;
&lt;h2 id=&#34;11-简介&#34;&gt;1.1. 简介&lt;/h2&gt;
&lt;p&gt;​	GOPATH 大家肯定都非常熟悉了，想必大家第一次安装 Go 语言环境的时候已经了解了，这里就不多介绍了。但是大家在做项目时，对于 Go 的代码是如何管理的呢？我们很多时候会用到 &lt;code&gt;go get &lt;/code&gt; 命令，主要就是从 github 上将代码下载到本地，而下载的代码就存在本地 GOPATH 的位置。这样我们对于同一个包的多个版本的管理就有问题了。还有很多不方便的地方，这里就不一一列举了。因此有了  go modules 的解决方案。在此之前也有 vendor 的解决方案，今天主要就是和大家介绍一下如何使用 go modules 来管理项目。&lt;/p&gt;
&lt;h1 id=&#34;2-go-modules&#34;&gt;2. Go modules&lt;/h1&gt;
&lt;h2 id=&#34;21-简介&#34;&gt;2.1. 简介&lt;/h2&gt;
&lt;p&gt;​	modules 是在 Go 1.11 版本中提出来的，go1.12版功能不断改进，再到go1.13版完善优化，目前也是官方推荐的工具。并且也被认为是 GOPATH 的替代方式。也就是说，我们的 Go 代码可以不用在 &lt;code&gt;$GOPATH/src&lt;/code&gt; 下了（不知道大家有没有觉得轻松了）。&lt;/p&gt;
&lt;h2 id=&#34;22-安装&#34;&gt;2.2. 安装&lt;/h2&gt;
&lt;p&gt;​	modules 的安装非常简单，安装 GO 1.13 版本或者升级到此版本。比此版本低个人不建议使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://godeamon.github.io/post/about-me/</link>
      <pubDate>Sat, 14 Mar 2020 15:12:41 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/about-me/</guid>
      <description>&lt;h1 id=&#34;我&#34;&gt;我&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;毕业于北华大学。&lt;/li&gt;
&lt;li&gt;现就职北京一家区块链公司。&lt;/li&gt;
&lt;li&gt;热爱 Go 语言，热爱分享，热爱开源。&lt;/li&gt;
&lt;li&gt;email：rayforce.lee@gmail.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;计划&#34;&gt;计划&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>