<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Attitude is altitude</title>
    <link>https://godeamon.github.io/tags/go/</link>
    <description>Attitude is altitude (go)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jun 2021 16:37:23 +0800</lastBuildDate>
    
    <atom:link href="https://godeamon.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何使用 Go 语言写区块链的 SDK （一）</title>
      <link>https://godeamon.github.io/post/sdk_1/</link>
      <pubDate>Sun, 27 Jun 2021 16:37:23 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/sdk_1/</guid>
      <description>&lt;p&gt;“ 最近在使用 Go 语言写一个区块链的 SDK，从设计到上线总结了其中的一些问题以及思考，如果你也在写 SDK 或者要写 SDK，希望这篇文章可以帮到你。这篇文件不会区分是否是区块链的 SDK，下一篇文章主要写区块链的 SDK 与普通系统 SDK 的一些区别以及相关思考”&lt;/p&gt;
&lt;p&gt;当写一个 SDK 时，第一需要考虑的问题应该是这个 SDK 的功能，或者说这个 SDK 是给什么样的用户来用，或者用户使用这个 SDK 能做什么。弄明白了这个问题后才可以开始动手。&lt;/p&gt;
&lt;p&gt;一个系统的接口肯定是知道的，但有些情况并不是一个接口就能够完成一个用户的操作或者需求，此时需要系统的多个接口组合调用才可以，同时在调用多个接口时，有很多逻辑是需要在客户端完成的，那么接口调用以及用户的逻辑就需要在 SDK 中完成。所以简单来说，一个 SDK 的基础功能就是系统的接口调用与用户的部分逻辑（当然这只是我抽象出来的，实际情况 SDK 有很多种）。&lt;/p&gt;
&lt;p&gt;我个人把 SDK 的出生过程总结如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SDK 功能确认；&lt;/li&gt;
&lt;li&gt;系统接口逻辑确认；&lt;/li&gt;
&lt;li&gt;SDK 接口设计；&lt;/li&gt;
&lt;li&gt;SDK 架构设计；&lt;/li&gt;
&lt;li&gt;SDK 使用文档或者示例代码；&lt;/li&gt;
&lt;li&gt;测试；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来就分这七步来聊一聊如何开发一个易用、可靠的 SDK。&lt;/p&gt;
&lt;h1 id=&#34;1-sdk-功能确认&#34;&gt;1. SDK 功能确认&lt;/h1&gt;
&lt;p&gt;某个系统的 SDK 会有官方的 SDK 也有其他人贡献的 SDK，比如有的企业或者开发者觉得官方提供的 SDK 功能不全，或者使用不方便，满足不了现在的需求.&lt;/p&gt;
&lt;p&gt;而且官方很大几率不会再开发一个专门的 SDK 来满足个别的需求，所以开发者有可能根据系统的接口来开发或者在官方 SDK 基础上添加功能。&lt;/p&gt;
&lt;p&gt;对于这种现象的出现，我觉得主要原因在于官方的 SDK 在设计之初就是存在问题的，或者说 SDK 的功能确认是错误。&lt;/p&gt;
&lt;p&gt;系统可能有几十个接口，但是对于用户有用的或者最常用的可能只有一半或者三分之一，所以 SDK 并不需要把所有的接口都支持，而是要把核心的功能筛选出来，这一点并不与上面提到的功能确认存在问题。&lt;/p&gt;
&lt;p&gt;所以该如何确认 SDK 的功能呢？如果系统功能比较少，那就很简单，即使把所有可以暴露的接口都支持也是没问题的，但是系统接口比较多时，就需要做减法。&lt;/p&gt;
&lt;p&gt;为什么不是做加法呢？如果做加法你可能就会发现，百分之九十以上的接口都需要支持，这个并不是最好的选择。&lt;/p&gt;
&lt;p&gt;从系统的功能或者接口做减法，把不能在 SDK 中调用的，系统后期可能去掉的（向前兼容），以及可能存在问题的或者即使给了用户，用户也不会使用的去掉，然后再把剩下的功能梳理出来，看下能满足用户的哪些需求，最终确定一个功能集，这就是 SDK 的最终功能。&lt;/p&gt;
&lt;h1 id=&#34;2-系统接口逻辑确认&#34;&gt;2. 系统接口逻辑确认&lt;/h1&gt;
&lt;p&gt;为什么我把这部分放在 SDK 功能确认之后呢？首先在写 SDK 时我们要记得一个点，就是系统的接口设计并不是百分百正确或者完美的。&lt;/p&gt;
&lt;p&gt;当我们确定了 SDK 功能集时，我们就会知道这些功能是否满足需求，如果不满足需求并且系统的接口同样不能满足，那么就要考虑其他方式了。&lt;/p&gt;
&lt;p&gt;如果确定的 SDK 功能集满足需求，我们还要考虑一个点，就是在从功能的角度出发时，系统的接口设计是否真的合理。&lt;/p&gt;
&lt;p&gt;在这些问题都确定后，目前对于 SDK 的功能算是真的确定下来了。&lt;/p&gt;
&lt;h1 id=&#34;3-sdk-接口设计&#34;&gt;3. SDK 接口设计&lt;/h1&gt;
&lt;p&gt;功能确定并不意味着接口确定了，接口的设计是 SDK 中最为关键的一步。&lt;/p&gt;
&lt;p&gt;任何系统不仅仅是为了解决某些问题，同时系统的易用性也决定着其能走多远。其中 SDK 是否好用也起着关键性的作用。&lt;/p&gt;
&lt;p&gt;试想当你拿到一个新的 SDK，一个功能需要调用 SDK 的多个接口才能完成，而且其中还有很多逻辑需要自己处理，那么第一反应肯定是：什么垃圾，还不如自己写了。&lt;/p&gt;
&lt;h2 id=&#34;31-接口尽量简洁&#34;&gt;3.1. 接口尽量简洁&lt;/h2&gt;
&lt;p&gt;一个接口能完成的事尽量不要用两个接口。说白了就是封装的能力。&lt;/p&gt;
&lt;p&gt;SDK 可能支持很多功能，甚至有着三四十个接口。但是一定要保证每个接口有着独立的能力。用户在使用时不至于看到这么多接口时不知道该使用哪个。&lt;/p&gt;
&lt;p&gt;但是，有很多接口我们不能够帮用户来做决定，很多情况确实需要用户来组合调用多个 SDK 的接口才能完成一件事情，这个并不冲突。&lt;/p&gt;
&lt;p&gt;假设 SDK 现在有 A 接口与 B 接口，每个接口能完成一个功能，同时有一个功能需要先调用 A 接口，然后客户端处理用户逻辑，再调用 B 接口。那么此时我们就可以考虑再增加一个接口 C。这个 C 接口的功能就是先调用 A 接口，然后处理用户逻辑，再调用 B 接口，也就是接口是可以灵活组合的。对于这个功能来说，使用者可以自己选择使用 C 接口还是 A 、B 组合。因为用户逻辑我们是不确定的，但是很多场景下，这部分的用户逻辑是相同的，换句话说 C 接口中实现的用户逻辑能满足大多数场景，不能满足的场景就只能使用 A、B 组合方式。&lt;/p&gt;
&lt;p&gt;简单来说就是 SDK 给了用户更多的选择，如果某个接口不能满足某些需求，那么可以调用其他接口组合使用，可以想象成一棵树的形式。&lt;/p&gt;
&lt;h2 id=&#34;32-接口向后兼容&#34;&gt;3.2. 接口向后兼容&lt;/h2&gt;
&lt;p&gt;除此之外，还有一个点需要考虑，那就是系统的升级。我们不能保证每次系统升级后，SDK 都能及时更新。万一出现这个情况，那系统升级还有什么意义呢？&lt;/p&gt;
&lt;p&gt;所以在设计 SDK 时，需要考虑是否可以更灵活。&lt;/p&gt;
&lt;p&gt;假如系统升级都是向前兼容的，同时很多接口的调用方式是一致的，例如在 grpc 中，某个接口参数中有一个字段是 type，当前系统支持的 type 有 A、B、C 三种，同时 SDK 接口封装时对每个 type 都封装成一个接口，使用 SDK 时可以通过接口名字来区分当前的 type，而不是将 type 当做参数。&lt;/p&gt;
&lt;p&gt;此时系统升级支持了 C、D 的 type，但是 SDK 还没有支持。那用户岂不是不能使用这个功能了。&lt;/p&gt;
&lt;p&gt;所以在设计 SDK 和需要考虑到这种情况，可以再增加一个接口，或者说一层接口。SDK 最外面有一层接口为 client 层，用户可以直接调用，其中某些参数是写好的。client 层在调用 request 层，request 层也可以暴露给用户。此时就相当于，百分之八十的功能可以直接调用 SDK 的一个接口完成，一些高级功能需要调用多个接口组合使用，对于 C、D 的 type 场景可以理解为高级功能。&lt;/p&gt;
&lt;h2 id=&#34;32-接口向前兼容&#34;&gt;3.2. 接口向前兼容&lt;/h2&gt;
&lt;p&gt;SDK 每次升级最主要的就是向前兼容，除非这是一次重构或者不兼容升级，我们可以在 go.mod 文件中声明为 v2、v3 版本。&lt;/p&gt;
&lt;p&gt;go 的 grpc 大家应该都用过，很多 go 语言的 SDK 接口方面设计的都有些类似，比如参数都是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; func MyFunc(a string, b int, opts ...interface){}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;opts 参数作为变长形式可以向前兼容。&lt;/p&gt;
&lt;p&gt;所以在设计接口时就需要考虑到：如果功能有增加或者删除或者修改，如何让 SDK 最大程度保持向前和向后兼容。&lt;/p&gt;
&lt;h1 id=&#34;4-sdk-架构设计&#34;&gt;4. SDK 架构设计&lt;/h1&gt;
&lt;p&gt;在 3.2 中说过接口可以分层，每一层的接口都有不同的分工，同时可以多层接口组合使用，这个也是架构设计的重要部分。&lt;/p&gt;
&lt;p&gt;看过很多 SDK 的大致架构，最终我个人觉得决定 SDK 架构设计的主要有两点，第一是业务形态，第二是 SDK 的功能集。&lt;/p&gt;
&lt;p&gt;这里的业务形态可以理解为系统架构是怎样的，比如 fabric，有多种节点角色组成，其交易流程就是至关重要的一部分，那么 SDK 的架构首先就要考虑这种情况。再说以太坊，SDK 非常简单，只要能发送交易、查询信息即可。&lt;/p&gt;
&lt;p&gt;再说 SDK 的功能集，确定了功能后，根据功能的多少、实现的复杂度等，再去设计一个合适的架构。&lt;/p&gt;
&lt;p&gt;架构设计和设计模式在 SDK 中是比较紧密的。尤其在功能比较少，比较简单的 SDK，可以先选择一个合适的设计模式，这种简单场景更多使用的设计模式有 builder、factory 等，这种不仅实现简单，而且也能很好地维护。&lt;/p&gt;
&lt;p&gt;在功能比较复杂的 SDK，首先需要抽象好接口，根据业务、接口划分功能模块以及对应接口，之后在具体的实现过程中再选择设计模式，这是与简单 SDK 的一个区别。&lt;/p&gt;
&lt;h1 id=&#34;5-sdk-使用文档或者示例代码&#34;&gt;5. SDK 使用文档或者示例代码&lt;/h1&gt;
&lt;p&gt;这一部分更多的是项目的管理。用户拿到 SDK 时怎么入手是一个关键问题，千万不要因为上手难度或者复杂度将用户拒之门外。&lt;/p&gt;
&lt;p&gt;当你拿到一个新的 SDK 或者项目最新做的是什么？我相信大多数都是根据文档先跑一个简单的例子，先跑成功。然后再通过文档或者示例代码来使用更多功能。&lt;/p&gt;
&lt;p&gt;所以文档和示例代码非常重要。&lt;/p&gt;
&lt;p&gt;文档中包括的内容除了项目的介绍，还需要有一个简单的示例，或者接口文档。在使用 Go 语言开发时，个人建议可以使用 Go doc 来管理接口文档以及示例代码。&lt;/p&gt;
&lt;p&gt;文档的第一个目的是能让用户第一次使用时，可以顺利完成第一个简单功能。其中包括 SDK 需要的环境，比如 golang 版本等。&lt;/p&gt;
&lt;p&gt;这一部分所说的文档并不只是项目的 README 文档，README 只是一个入口，它更多的作用是用户通过这个文档可以找到对应的文档或者其他需要的东西，包括其他文档、项目、代码等等。&lt;/p&gt;
&lt;p&gt;再说一下如何写示例代码。SDK 的功能一定会有低级功能和高级功能的区分，或者常用功能和非常用功能区分。所以很多情况可以在项目中创建一个 example 目录，其中就包括各种示例代码，尤其是高级功能，需要多个接口组合使用，同时在示例代码中写好对应的注释，用户在使用时可以照葫芦画瓢。&lt;/p&gt;
&lt;h1 id=&#34;6-测试&#34;&gt;6. 测试&lt;/h1&gt;
&lt;p&gt;测试包括单测和功能测。首先说单测，很多时候在编码是需要考虑单测，甚至为单测可以开一些口子或者埋一些钩子。特别是在有网络请求时。我们可以使用 monkey patch、mock 等方式提高我们的覆盖率，但这不是目的。&lt;/p&gt;
&lt;p&gt;我认为单测需要做到这几个点：测试程序某些场景是否 panic，参数检查是否足够，构造的数据是否正确，返回的数据是否正确等。这样每次跑单测时都可以放心之前的逻辑。&lt;/p&gt;
&lt;p&gt;还有一点就是不要为了覆盖率写单测，这只会浪费时间。&lt;/p&gt;
&lt;p&gt;写好了 SDK 我们如何测试功能是否符合预期呢？比如区块链中的转账功能，这个功能的检查点有转账前两个账户余额，转账后两个账户余额，转账的金额，是否有手续费，交易是否成功，交易中的数据是否和 SDK 中的一致等。所以在测这些功能时我们可以采用单测的形式，在交易前后把相关数据查询，交易后再判断是否符合预期。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;写在最后&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要是我个人在工作过程中的一些总结，仁者见仁智者见智，如果你有计划写 SDK 或者正在写，希望可以对你有帮助。下一篇文章会聊一下关于区块链系统，应该如何来写 SDK。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Sysmon</title>
      <link>https://godeamon.github.io/post/go-sysmon/</link>
      <pubDate>Sun, 19 Jul 2020 15:14:51 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/go-sysmon/</guid>
      <description>&lt;h1 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h1&gt;
&lt;p&gt;很多系统中都有守护进程，Go 中也不例外。Go 的系统监控主要目的就是隔一段时间来检查一下运行时是否进入异常状态。本文会介绍一下 sysmon 的创建以及其在系统中的作用。&lt;/p&gt;
&lt;p&gt;关于本文整理了一个大体的概括图（建议保存此图片，以后复习就就不需要再通篇读文章了）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://godeamon.github.io/Go-sysmon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-sysmon-的创建&#34;&gt;2. sysmon 的创建&lt;/h1&gt;
&lt;p&gt;对于其创建非常简单，在 runtime.main 函数（位于：go/src/runtime/proc.go 文件中）中启动程序时创建。基本流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 runtime.newm 函数，创建一个 runtime.m 结构对象。&lt;/li&gt;
&lt;li&gt;runtime.newm 函数再调用 runtime.newm1 函数，然后调用 runtime.newsproc 函数，系统调用 clone 一个线程。&lt;/li&gt;
&lt;li&gt;此时在创建好的 runtime.m 对象中已经存在了 sysmon 函数，在创建的线程中执行此函数，开始系统监控。
&lt;ul&gt;
&lt;li&gt;第一步检查是否有死锁。&lt;/li&gt;
&lt;li&gt;然后开始无限循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环最开始休眠时间为20us。&lt;/li&gt;
&lt;li&gt;大约1ms后每次休眠时间翻倍（50个循环中都没有唤醒 goroutine，休眠时间翻倍）。&lt;/li&gt;
&lt;li&gt;最长每次休眠时间10ms。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面就是一个整体流程，本文没有将所有源码都复制过来，大家可以参考源码来理解上面这一过程。&lt;/p&gt;
&lt;h1 id=&#34;3-sysmon-的作用&#34;&gt;3. sysmon 的作用&lt;/h1&gt;
&lt;p&gt;系统监控的左右主要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug 监控程序&lt;/li&gt;
&lt;li&gt;强制垃圾回收
&lt;ul&gt;
&lt;li&gt;本质就是定期检查上一次垃圾回收是什么时间，如果长时间未进行垃圾回收，就强制执行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络轮询
&lt;ul&gt;
&lt;li&gt;10ms进行网络轮询&lt;/li&gt;
&lt;li&gt;检查是否有待执行的 fd&lt;/li&gt;
&lt;li&gt;将就绪的 goroutine 加入全局队列&lt;/li&gt;
&lt;li&gt;如果存在空闲P，就用这个P来执行任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抢占
&lt;ul&gt;
&lt;li&gt;可抢占系统调用的 P：
&lt;ul&gt;
&lt;li&gt;如果你不了解 Go 的 runtime 或者 MPG 模型，那么这部分理解可能困难一些。&lt;/li&gt;
&lt;li&gt;我们知道一个 G 是运行的 P 上的，那么当这个 G 进行系统调用时，当前的 P 会怎样呢？是的，这时 P 其实就在等当前的 G，那么假如对于 P 的本地 G 队列还有在等待的 G时，对于这种情况我们肯定是不允许的。那么我们就需要对这个 P 进行抢占了。&lt;/li&gt;
&lt;li&gt;在任务量过多时，所有的处理器（P）都在认真工作，此时对于系统调用的 P 就需要抢占了，目的就是大家都这么拼命，你就不要等你的那个系统调用的 G 了。&lt;/li&gt;
&lt;li&gt;除了以上两种情况，假如这次系统调用时间过长，那么也会发起抢占的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可抢占运行时间过长的 P：
&lt;ul&gt;
&lt;li&gt;当一个 G 在 P 上运行了很长时间，说明这个 G 开始欺负其他的 G 了，此时就需要对这个运行时间过长的 G 做出惩罚，抢占其 P 并将这个 G 放入全局队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时关于 sysmon 的东西就讲完了，大家可以边看源码边理解此文章，但是建议对 Go 的 runtime 有一些了解之后再阅读抢占部分的内容。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Map</title>
      <link>https://godeamon.github.io/post/go-map/</link>
      <pubDate>Sun, 14 Jun 2020 20:22:15 +0800</pubDate>
      
      <guid>https://godeamon.github.io/post/go-map/</guid>
      <description>&lt;h1 id=&#34;1-哈希表&#34;&gt;1 哈希表&lt;/h1&gt;
&lt;p&gt;哈希表属于编程中比较常见的数据结构之一，基本上所有的语言都会实现数组和哈希表这两种结构，&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table&#34;&gt;Hash table&lt;/a&gt; 的历史是比较悠远的，我们在编程时也是离不开的，这种数据结构的作用其实很简单，就是我们可以根据一个 &lt;code&gt;key&lt;/code&gt; 可以查找到对应的 &lt;code&gt;value&lt;/code&gt;，也就是说这种数据结构存储的是键值对的“列表”。&lt;/p&gt;
&lt;h2 id=&#34;11-原理&#34;&gt;1.1 原理&lt;/h2&gt;
&lt;p&gt;首先哈希表中第一个点就是哈希函数，也就是我们需要一个函数，根据我们的 key 计算出一个值，然后根据这个值可以直接找到对应的 value。因为我们的哈希表的一个作用就是 O(1) 复杂度找到 key 对应的 value。&lt;/p&gt;
&lt;p&gt;完美的哈希函数是可以做到将任何一个 key 值都可以计算出一个唯一且固定大小的值，不幸的是目前世界上还没有这种完美的哈希函数。因此我们需要解决的另外一个问题就是哈希冲突的解决。&lt;/p&gt;
&lt;h3 id=&#34;111-哈希冲突&#34;&gt;1.1.1 哈希冲突&lt;/h3&gt;
&lt;p&gt;假如我们有两个不同的 key，通过哈希函数计算出的结果相同，那么我们是不能认为这两个 key 在 map 中是相同的，也就是如果出现了这种情况，我们的 map 结构是可以解决这个问题的。目前解决办法有很多，这里只说三个比较常见的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开放地址法（Open Addressing）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入时：假如 key &lt;code&gt;Alice&lt;/code&gt; 与 &lt;code&gt;Bob&lt;/code&gt; 通过哈希函数计算出结果冲突。当 map 中已经存在 key &lt;code&gt;Alice&lt;/code&gt;，再写入 key 为 &lt;code&gt;Bob&lt;/code&gt;时，发现哈希结果对应位置已经存在 &lt;code&gt;Alice&lt;/code&gt;，此时在 &lt;code&gt;Alice&lt;/code&gt; 位置之后再寻找位置，一直找到为空的位置，将 &lt;code&gt;Bob&lt;/code&gt; 写入。&lt;/li&gt;
&lt;li&gt;读取时：此时 map 中已存在 key &lt;code&gt;Alice&lt;/code&gt;、&lt;code&gt;Bob&lt;/code&gt;，且哈希结果相同，此时想查找 &lt;code&gt;Bob&lt;/code&gt; 对应 value 时，先计算 &lt;code&gt;Bob&lt;/code&gt; 哈希结果，再通过哈希结果在 map 中查找位置，此时由于和 &lt;code&gt;Alice&lt;/code&gt; 哈希结果相同，并且 &lt;code&gt;Alice&lt;/code&gt; 先于 &lt;code&gt;Bob&lt;/code&gt; 存入 map，所以会直接找到 &lt;code&gt;Alice&lt;/code&gt; 的位置，发现 key 是 Alice 不是 Bob，接着在 Alice 位置后面查找，直到找到 key Bob 或者找到空。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再哈希法（Re-Hashing）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计多个哈希函数，假如 Alice 与 Bob 计算哈希结果相同，那么用另外一个哈希函数来计算 Bob 的哈希值，这种方式来解决哈希冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链地址法（Separate Chaining）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此方法将同一个哈希结果对应的位置想象成一个桶，如果多个 key 对应哈希结果相同，那么都放到同一个桶中，并且桶中元素使用链表结构存储。&lt;/li&gt;
&lt;li&gt;写入时：Alice 于 Bob 哈希结果相同，此时 map 已经有 Alice，再写入 Bob 时，发现对应哈希结果位置已经存在了 Alice，此时在当前桶中的 Alice 后链接一个 Bob，此时哈希结果对应的桶就存在了两个元素 Alice 与 Bob。&lt;/li&gt;
&lt;li&gt;读取时：读取 Bob key 时，发现对应哈希结果的桶中第一个元素是 Alice，此时在桶中按链表顺序挨个查找，直到 key 相同或者空。&lt;/li&gt;
&lt;li&gt;装载因子：此方案存在一个问题，当一个桶中元素过多时，其复杂度将增加，极端情况下就变成了链表。所以我们会限制在一个桶中元素的个数。这样在一个桶中元素过多时，需要生成新的桶。
&lt;ul&gt;
&lt;li&gt;装载因子 = 元素总量 / 桶总个数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Go 语言中，map 使用的是链地址法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-go-中-map分析&#34;&gt;2 Go 中 map分析&lt;/h1&gt;
&lt;h2 id=&#34;21-map-数据结构&#34;&gt;2.1 map 数据结构&lt;/h2&gt;
&lt;p&gt;map 的源码位于 src/runtime/map.go 文件中，结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hmap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前 map 中元素数量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;flags&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 当前 buckets 数量，2^B 等于 buckets 个数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;noverflow&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// approximate number of overflow buckets; see incrnoverflow for details
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash0&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 哈希种子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buckets&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// buckets 数组指针
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;oldbuckets&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 扩容时保存之前 buckets 数据。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nevacuate&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// progress counter for evacuation (buckets less than this have been evacuated)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapextra&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// optional fields
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 每一个 bucket 的结构，即 hmap 中 buckets 指向的数据。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bmap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tophash&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;bucketCnt&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 编译期间重构此结构
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bmap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;topbits&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;     [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;keytype&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;   [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;valuetype&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pad&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 hmap 的结构这里已经将很多重要的字段列出来了，其中最重要的就是 buckets 这一部分，根据上面我们说过的链地址法可知，对同一类 key （哈希结果相同）放入相同的桶中。此时每一个桶还有另外一个字段 overflow，也就是当前桶装不下就会再创建新的桶。这就是 Go 中 map 的主要实现方法，更详细的部分我们接下来一点一点聊。&lt;/p&gt;
&lt;h2 id=&#34;22-源码&#34;&gt;2.2 源码&lt;/h2&gt;
&lt;p&gt;map 的源码位于 src/runtime/map.go 文件中。关于 map 的操作的具体实现在这里都可以找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建map：&lt;code&gt;func makemap(t *maptype, hint int, h *hmap) *hmap &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问某个 key：
&lt;ul&gt;
&lt;li&gt;返回结果只包括 value：&lt;code&gt;func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回结果包括 bool 结果：&lt;code&gt;func mapaccess2(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool) &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存入 key：&lt;code&gt;func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除 key：&lt;code&gt;func mapdelete(t *maptype, h *hmap, key unsafe.Pointer) &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本篇文章不会带大家将源码通读一遍，但是会将其实现过程以图或者文字形式分析出来，但是建议大家有时间可以根据本篇文章的内容再去自己读一遍源码，如果我这里将所有源码都解释一遍，估计朋友们很快就又忘记了，还不如记住实现流程。所以本文更多的是讲 map 每个操作的过程图，以及其中的部分要点，而不是将源码一行一行的解释出来。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-图解-map&#34;&gt;3. 图解 map&lt;/h1&gt;
&lt;h2 id=&#34;31-创建map&#34;&gt;3.1 创建map&lt;/h2&gt;
&lt;p&gt;我们已经知道 map 的数据结构，其实 map 的初始化也无非就是填充各个字段而已：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个就是 hash0 字段，此处会随机给一个种子，用在哈希函数计算时使用。关于哈希函数在运行时，Go 会检测 cpu 是否支持 aes，支持则使用 aes hash，否则使用 memhash。位于路径：&lt;code&gt;src/runtime/alg.go&lt;/code&gt; 下的 &lt;code&gt;alginit()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;根据参数 &lt;code&gt;hint&lt;/code&gt;计算需要的桶数。&lt;/li&gt;
&lt;li&gt;根据桶的数量创建一个连续的空间来存储桶的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大体上就是这么一个过程，关于源码中的一些检查项这里就不多废话了，并且源码注释也写的很清楚了。&lt;/p&gt;
&lt;p&gt;下面这个图就是一个 map 的主要相关存储结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://godeamon.github.io/map.png&#34; alt=&#34;map&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;32-定位-key&#34;&gt;3.2 定位 key&lt;/h2&gt;
&lt;p&gt;一个 map 初始化后基本的结构我们已经知道了，接下来就是我们在这个结构中如何添加一个 key 对应的 value。&lt;/p&gt;
&lt;p&gt;我们再看一遍每一个桶的结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bmap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;topbits&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;     [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;keytype&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;   [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;valuetype&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;pad&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 keys 与 values 字段就是存储 key 和 value 的真正内存的地方，我们可以看到这里每个都是长度为8的数组，也就是说一个桶内存了两个数组，一个存的是 key 列表，另一个是 value 列表，并且每个数据的大小都是8。那么当有第9个元素入桶时，我们就需要创建新的桶了，也就是 overflow 字段指向一个新的 bucket（bmap 结构）。&lt;/p&gt;
&lt;p&gt;还有一个字段就是 topbits，也是一个长度为8的数组，其实看到这里我们应该想到，这三个数组长度都相同应该有对应关系了，也就是说 topbits 数组中第一个元素是一个8位大小，我们称之为 高8位，这是我们再回想一下哈希函数，我们的哈希函数的结果取高8位，然后存入 topbits 数组，然后其在数组的索引我们称之为i，那么我们就可以在 keys 和 values 数组的第i个位置存储数据了。&lt;/p&gt;
&lt;p&gt;上面是在已知一个桶中添加或者修改元素，那么我们该如何查找这个桶呢？&lt;/p&gt;
&lt;p&gt;我们知道在 hmap 中有 buckets 字段，其指向 []bmap 数组。那么我们就需要通过 key 找到对应的 bmap 在 []bmap 中的位置。关于此处的计算大家感兴趣的可以看一下源码，这里就不详细说每一个运算符都是怎么运算的，只说一下大致的流程：hmap 中有一个 B 字段，根据字段 B 的值，以及 key 的 hash 值，计算出目标桶在 []bmap 中的位置（其实就是取了 key 的哈希的后几位作为数组的下标即可）。&lt;/p&gt;
&lt;p&gt;现在我们根据一个 key 可以在 hmap 中的 buckets 字段找到对应的 bmap 对象，同时在 bmap 中根据 key 哈希的高八位找到其在 keys 与 values 数组中的位置。这里我们还没有说如果有 overflow 的情况。其实不说想必大家也能猜到了，在我们定位到一个 bmap 时，是不知道其一共有多少个溢出桶的：**假设我们有桶 A，A 的 overflow 字段指向桶 B，B 的 overflow 指向桶 C，假设我们此时根据 key 的哈希找到了桶 A，然后 for 循环遍历桶中的 topbits 数组，如果某个高8位的哈希与我们想找的 key 的哈希的高8位相同，就去对应位置的 keys 数组查找对应的 key1，假如 key1 与我们的目标 key 相等，那么直接返回其对应 values 数组中的 value 即可。如果key1 与我们的目标 key 不相等，接着变量桶中其他元素。假设桶中所有元素遍历后没有找到相同的 key，那么此时就要到 A 桶的溢出桶 B 再去遍历，如果 B 中依然找不到再去桶 C 中查找。**此时大家可以思考一下如果是你，你会如何实现这部分代码呢？你实现的和 Go 的源码是否一样呢？&lt;/p&gt;
&lt;p&gt;当我们知道了上面定位 key 的过程，对于 key 的增删改查过程也就不多说了，因为核心的我们已经掌握了，现在大家可以去看一下源码了，这时大家看源码必定事半功倍。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>